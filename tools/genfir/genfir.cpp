#include <iostream>
#include <fstream>
#include <vector>
#include <stdexcept>
#include <stdint.h>
#include <complex>
#include <iomanip>
#include <fftw3.h>

#include "InWaveFile.hpp"

int main(int argc, char * argv[]) {
  if ( argc < 2 ) {
    std::cerr << "Usage: genfir ir-wav-file-1 ir-wav-file-2 ir-wav-file-3 ..." << std::endl;
    return 1;
  }
  unsigned int number = argc-1;
  std::cout << "// This file was autogenerated" << std::endl;
  std::cout << "#include \"FIRCoeffecients.h\"" << std::endl;
  for ( unsigned int program=0; program<number; ++program ) { 
    std::string filename(argv[program+1]);
    std::ifstream wav_file( filename.c_str(), std::ios::binary );
    
    std::string name;
    name = filename.substr(0, filename.rfind('.'));
    std::cerr << name << std::endl;
    InWaveFile wav(wav_file);  
    std::vector<float> input;
    float sample[wav.channels()];
    float sum = 0.f;
    while ( wav.read(sample) == true ) {
      sum += fabs(sample[0]);
      input.push_back(sample[0]);
    }
    sum = sum / 20.f;
    for ( unsigned int i=0; i<input.size(); ++i ) {
      input[i] /= sum;
    }
    
    float * time_domain = (float*)fftwf_malloc(sizeof(float) * input.size() );
    unsigned int fft_size = (input.size()>>1)+1;
    std::complex<float> * fir = (std::complex<float>*)fftwf_malloc( sizeof(fftwf_complex) * fft_size );
    fftwf_plan plan = fftwf_plan_dft_r2c_1d(input.size(), time_domain, (fftwf_complex*)fir, FFTW_ESTIMATE);
    std::copy( input.begin(), input.end(), time_domain );
    fftwf_execute(plan);
    fftwf_destroy_plan(plan);
    fftwf_free(time_domain);  
    
    std::cout << "float kFIRProgramRawCoeffecients" << program << "[] = {";
    for ( unsigned int i=0; i<fft_size; ++i ) {
      if ( i != 0 ) {
	std::cout << ",";
      }
      std::cout << std::endl << std::scientific << "    " << fir[i].real() << ", " << fir[i].imag();
    }
    std::cout << std::endl << "};" << std::endl << std::endl;
    
    std::cout << "tFIRProgram kFIRProgram" << program << " = { \"" 
	      << name << "\", " << fft_size 
	      << ", kFIRProgramRawCoeffecients" << program << "};" << std::endl << std::endl;

    fftwf_free(fir);
  }
  std::cout << "tFIRProgram kFIRProgramList[] = { ";
  for ( unsigned int j=0; j<number; ++j ) {
    if ( j!=0 ) {
      std::cout << ", ";
    }
    std::cout << "kFIRProgram" << j;
  }
  std::cout << " };" << std::endl << std::endl;
  std::cout << "tFIRCoeffecients kFIRPrograms = { " << number << ", kFIRProgramList };" << std::endl << std::endl;
  return 0;
}
