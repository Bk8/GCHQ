/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "GCHQKernel.h"

//==============================================================================
/** parameter ids */
enum {
  kProgramParameter = 0,
  kGainInParameter = 1,
  kGainOutParameter = 2,
  kMaxParameters = 3
};

const float kMaxGain = 12.f;

class GCHQEditor;
//==============================================================================
/**
*/
class GCHQAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    GCHQAudioProcessor();
    ~GCHQAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;
    int getParameterNumSteps (int index) override;
    String getParameterLabel (int index) const override;
    float getParameterDefaultValue (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

private:
    //==============================================================================
    void prepareFIRFilter(double sampleRate, unsigned int segmentSize);

    //==============================================================================
    int parameterToProgram(float parameter);
    float programToParameter(int program);

    static inline float gainToParameter(float gain) {
      return (Decibels::gainToDecibels(gain)/(2.f*kMaxGain)) + 0.5f;
    }

    static inline float parameterToGain(float parameter) {
      return Decibels::decibelsToGain( 2.f * kMaxGain * ( parameter - 0.5f ) );
    }

    void setIndicator( bool indicator );
private:
    friend class GCHQEditor;
    //==============================================================================
    Array<FFT::Complex> firCoeffs;
    OwnedArray<GCHQKernel> kernels;
    bool isPrepared;
    int blockSize, fftOrder;
    int currentProgram;
    float gainIn, gainOut;
    int samplesSinceIndicator;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GCHQAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
